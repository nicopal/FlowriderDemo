(* 

flowrider protocol

Message 1: C -> Switch : (P)TCP
Message 2: If flow not found : Switch -> Controller : (Control message)
Message 3: Controller -> C : {K}key1
Message 4: Controller -> S : {K}key2
Message 5: Controller -> Switch : (P+update)
Message 6: Switch -> C : (P+update)
Message 7: C -> S : { Message }K
*)

(* key derivation - maybe hash /more general *)


type host.
type key.

table flows(host, host, bool).
table keys(host, host, key).
(* multi flow with key label *)

free A, B: host. 


(* Shared key encryption *)

fun sencrypt(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; sdecrypt(sencrypt(x,y),y) = x.


(* Shared key encryption for key *)

fun sencryptkey(key,key): key.
reduc forall x: key, y: key; sdecryptkey(sencryptkey(x,y),y) = x.

(* Secrecy assumptions *)
not attacker (new key1).
not attacker (new key2).

(* Queries *)

free c : channel.
free mm : bitstring  [private].
free ini : bitstring. 
query attacker ( mm ).


(* query k: key, x :host; inj-event(endprivisionClient(k,x)) ==> inj-event(beginprovisionClient(k,x)). *)
(* query k: key, x :host; inj-event(endprivisionServer(k,x)) ==> inj-event(beginprovisionServer(k,x)). *)
(* query x :host; inj-event(endupdate(x)) ==> inj-event(beginupdate(x)). *)




(* Client *)
let clientC(k1: key) =  
(* Message 1 *)
out( c , (ini , A, B));
(* Message 4 *)
in (c , x :key); 
let z =  sdecryptkey (x , k1) in
(* event endprivisionClient(z , A); *)
(* Message 6 *)
in( c, (P:bitstring, A2:host, B2:host));
(* event endupdate(A2); *)
(* Message 7 *)
out ( c , sencrypt ( mm , z )).

(* Controller *)
let controllerC(k1: key, k2: key) =
(* Message 2 *)
in( c, (P:bitstring, Aa:host, Bb:host));
new ke : key;
(* event beginprovisionClient(ke , Aa); *)
(* event beginprovisionServer(ke , Bb); *)
out (c , sencryptkey ( ke , k1 ));
out (c , sencryptkey ( ke , k2 ));
insert keys(Aa,Bb, ke);
(* Message 5 *)
(* event beginupdate(Aa); *)
out( c, (P, Aa, Bb)). 
(* For later +key label *)


(* Switch *)
let switchS() =
(* Message 1 *)
in( c , (ms:bitstring, Aa:host, Bb:host));
(* Message 2  *)
get flows(=Aa, =Bb, f) in
if not(f) then 
out ( c, (ms, Aa, Bb) );
(* Message 5 *)
in( c, (P:bitstring, A1:host, B1:host));
insert flows(A1, B1, true );
(* Message 6 *)
out ( c, (P, A1, B1) ).


(* Server *)
let serverS(k2: key) =
(* Message 3 *)
in (c , x :key); 
let z =  sdecryptkey (x , k2) in
(* event endprivisionServer(z , Bb); *)
(* Message 7 *)
in (c , mn :bitstring); 
let me = sdecrypt (mn , z) in 
if me = mm then
0.


(* Start process *)
process 
     (* orchestration keys *)
      new key2 : key;
	  new key1 :key;
      (* Launch an unbounded number of sessions *)
      (  ( ! clientC (key1))|( ! serverS (key2 ))| ( ! controllerC (key1, key2))|( ! switchS ())  )








